package com.school.anecole.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.school.anecole.dto.LessonBuilderRequest;
import com.school.anecole.model.Class;
import com.school.anecole.model.Lesson;
import com.school.anecole.model.User;
import com.school.anecole.model.UserRole;
import com.school.anecole.service.LessonBuilderService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.doNothing;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(com.school.anecole.controller.LessonBuilderController.class)
@ActiveProfiles("test")
class LessonBuilderIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private LessonBuilderService lessonBuilderService;

    private ObjectMapper objectMapper;
    private LessonBuilderRequest testLessonRequest;
    private Lesson testLesson;
    private User testTeacher;
    private Class testClass;

    @BeforeEach
    void setUp() {
        objectMapper = new ObjectMapper();
        
        // Create test data
        createTestData();
    }

    private void createTestData() {
        // Create test teacher
        testTeacher = new User();
        testTeacher.setId(1L);
        testTeacher.setUsername("testteacher");
        testTeacher.setRole(UserRole.TEACHER);

        // Create test class
        testClass = new Class();
        testClass.setId(1L);
        testClass.setName("Test Class");
        testClass.setTeacher(testTeacher);

        // Create test lesson
        testLesson = new Lesson();
        testLesson.setId(1L);
        testLesson.setTitle("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫");
        testLesson.setDescription("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞");
        testLesson.setClassEntity(testClass);
        testLesson.setActive(false);

        // Create test lesson request
        testLessonRequest = new LessonBuilderRequest();
        testLessonRequest.setTitle("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫");
        testLessonRequest.setDescription("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞");
        testLessonRequest.setClassId(testClass.getId());
        testLessonRequest.setOrderNumber(1);
        testLessonRequest.setVideoUrl("https://example.com/video.mp4");
        testLessonRequest.setAudioUrl("https://example.com/audio.mp3");
        testLessonRequest.setImageUrl("https://example.com/image.jpg");
        testLessonRequest.setPublishImmediately(false);

        // Add words
        LessonBuilderRequest.WordRequest word1 = new LessonBuilderRequest.WordRequest();
        word1.setWord("hello");
        word1.setTranslation("–ø—Ä–∏–≤–µ—Ç");
        word1.setExample("Hello, world!");
        word1.setPronunciation("h…ôÀàlo ä");

        LessonBuilderRequest.WordRequest word2 = new LessonBuilderRequest.WordRequest();
        word2.setWord("goodbye");
        word2.setTranslation("–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è");
        word2.setExample("Goodbye, see you later!");
        word2.setPronunciation("Àå…° ädÀàba…™");

        testLessonRequest.setWords(Arrays.asList(word1, word2));
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testCreateLesson() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞...");

        when(lessonBuilderService.createLesson(any(LessonBuilderRequest.class)))
                .thenReturn(testLesson);

        // Act & Assert
        mockMvc.perform(post("/api/lesson-builder/create")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testLessonRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.title").value("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫"))
                .andExpect(jsonPath("$.description").value("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞"))
                .andExpect(jsonPath("$.active").value(false));

        System.out.println("‚úÖ –£—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testGetDraftLessons() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤...");

        List<Lesson> draftLessons = Arrays.asList(testLesson);
        when(lessonBuilderService.getDraftLessons(testTeacher.getId()))
                .thenReturn(draftLessons);

        // Act & Assert
        mockMvc.perform(get("/api/lesson-builder/teacher/" + testTeacher.getId() + "/drafts"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$[0].title").value("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫"))
                .andExpect(jsonPath("$[0].active").value(false));

        System.out.println("‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testUpdateLesson() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞...");

        Lesson updatedLesson = new Lesson();
        updatedLesson.setId(1L);
        updatedLesson.setTitle("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫");
        updatedLesson.setDescription("–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ");
        updatedLesson.setClassEntity(testClass);
        updatedLesson.setActive(false);

        when(lessonBuilderService.updateLesson(eq(1L), any(LessonBuilderRequest.class)))
                .thenReturn(updatedLesson);

        // Act & Assert
        mockMvc.perform(put("/api/lesson-builder/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testLessonRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.title").value("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫"))
                .andExpect(jsonPath("$.description").value("–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"));

        System.out.println("‚úÖ –£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testPublishLesson() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Ä–æ–∫–∞...");

        Lesson publishedLesson = new Lesson();
        publishedLesson.setId(1L);
        publishedLesson.setTitle("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫");
        publishedLesson.setActive(true);

        doNothing().when(lessonBuilderService).publishLesson(1L);

        // Act & Assert
        mockMvc.perform(put("/api/lesson-builder/1/publish"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.active").value(true));

        System.out.println("‚úÖ –£—Ä–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testGetPublishedLessons() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤...");

        Lesson publishedLesson = new Lesson();
        publishedLesson.setId(1L);
        publishedLesson.setTitle("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫");
        publishedLesson.setActive(true);

        List<Lesson> publishedLessons = Arrays.asList(publishedLesson);
        when(lessonBuilderService.getPublishedLessons(testTeacher.getId()))
                .thenReturn(publishedLessons);

        // Act & Assert
        mockMvc.perform(get("/api/lesson-builder/teacher/" + testTeacher.getId() + "/published"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$[0].title").value("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫"))
                .andExpect(jsonPath("$[0].active").value(true));

        System.out.println("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @WithMockUser(username = "student1", roles = {"STUDENT"})
    void testGetStudentLessons() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞...");

        List<Lesson> studentLessons = Arrays.asList(testLesson);
        when(lessonBuilderService.getStudentLessons(1L))
                .thenReturn(studentLessons);

        // Act & Assert
        mockMvc.perform(get("/api/lesson-builder/student/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$[0].title").value("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫"));

        System.out.println("‚úÖ –£—Ä–æ–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testPreviewLesson() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–∞...");

        when(lessonBuilderService.previewLesson(any(LessonBuilderRequest.class)))
                .thenReturn(testLesson);

        // Act & Assert
        mockMvc.perform(post("/api/lesson-builder/preview")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testLessonRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.title").value("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫"))
                .andExpect(jsonPath("$.description").value("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞"));

        System.out.println("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testCopyLesson() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞...");

        Lesson copiedLesson = new Lesson();
        copiedLesson.setId(2L);
        copiedLesson.setTitle("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ (–∫–æ–ø–∏—è)");
        copiedLesson.setDescription("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞");
        copiedLesson.setClassEntity(testClass);
        copiedLesson.setActive(false);

        when(lessonBuilderService.copyLesson(1L))
                .thenReturn(copiedLesson);

        // Act & Assert
        mockMvc.perform(post("/api/lesson-builder/1/copy"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(2))
                .andExpect(jsonPath("$.title").value("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ (–∫–æ–ø–∏—è)"))
                .andExpect(jsonPath("$.active").value(false));

        System.out.println("‚úÖ –£—Ä–æ–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testDeleteLesson() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞...");

        // Act & Assert
        mockMvc.perform(delete("/api/lesson-builder/1"))
                .andExpect(status().isOk())
                .andExpect(content().string("–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"));

        System.out.println("‚úÖ –£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testCreateLessonWithInvalidData() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...");

        LessonBuilderRequest invalidRequest = new LessonBuilderRequest();
        // Missing required fields

        // Act & Assert
        mockMvc.perform(post("/api/lesson-builder/create")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isBadRequest());

        System.out.println("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testCreateLessonWithNonExistentClass() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª–∞—Å—Å–æ–º...");

        LessonBuilderRequest requestWithInvalidClass = new LessonBuilderRequest();
        requestWithInvalidClass.setTitle("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫");
        requestWithInvalidClass.setDescription("–û–ø–∏—Å–∞–Ω–∏–µ");
        requestWithInvalidClass.setClassId(999L); // Non-existent class

        when(lessonBuilderService.createLesson(any(LessonBuilderRequest.class)))
                .thenThrow(new RuntimeException("–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // Act & Assert
        mockMvc.perform(post("/api/lesson-builder/create")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(requestWithInvalidClass)))
                .andExpect(status().isInternalServerError());

        System.out.println("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }

    @Test
    @WithMockUser(username = "testteacher", roles = {"TEACHER"})
    void testFullLessonBuilderWorkflow() throws Exception {
        System.out.println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞...");

        // Step 1: Create lesson
        when(lessonBuilderService.createLesson(any(LessonBuilderRequest.class)))
                .thenReturn(testLesson);

        String createResponse = mockMvc.perform(post("/api/lesson-builder/create")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testLessonRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.active").value(false))
                .andReturn()
                .getResponse()
                .getContentAsString();

        System.out.println("‚úÖ –®–∞–≥ 1: –£—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω");

        // Step 2: Update lesson
        Lesson updatedLesson = new Lesson();
        updatedLesson.setId(1L);
        updatedLesson.setTitle("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫");
        updatedLesson.setActive(false);

        when(lessonBuilderService.updateLesson(eq(1L), any(LessonBuilderRequest.class)))
                .thenReturn(updatedLesson);

        mockMvc.perform(put("/api/lesson-builder/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testLessonRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.title").value("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫"));

        System.out.println("‚úÖ –®–∞–≥ 2: –£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω");

        // Step 3: Publish lesson
        Lesson publishedLesson = new Lesson();
        publishedLesson.setId(1L);
        publishedLesson.setTitle("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫");
        publishedLesson.setActive(true);

        doNothing().when(lessonBuilderService).publishLesson(1L);

        mockMvc.perform(put("/api/lesson-builder/1/publish"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.active").value(true));

        System.out.println("‚úÖ –®–∞–≥ 3: –£—Ä–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω");

        // Step 4: Get published lessons
        List<Lesson> publishedLessons = Arrays.asList(publishedLesson);
        when(lessonBuilderService.getPublishedLessons(testTeacher.getId()))
                .thenReturn(publishedLessons);

        mockMvc.perform(get("/api/lesson-builder/teacher/" + testTeacher.getId() + "/published"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$[0].active").value(true));

        System.out.println("‚úÖ –®–∞–≥ 4: –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã");

        System.out.println("üéâ –ü–æ–ª–Ω—ã–π workflow –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
    }
} 