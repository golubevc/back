package com.school.anecole;

import com.school.anecole.dto.LessonBuilderRequest;
import com.school.anecole.model.Class;
import com.school.anecole.model.Lesson;
import com.school.anecole.model.User;
import com.school.anecole.model.UserRole;
import com.school.anecole.repository.ClassRepository;
import com.school.anecole.repository.LessonRepository;
import com.school.anecole.repository.UserRepository;
import com.school.anecole.service.LessonBuilderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Profile;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.List;

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–Ω–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —É—Ä–æ–∫–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ "test-runner"
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * mvn spring-boot:run -Dspring-boot.run.profiles=test-runner
 */
@Component
public class LessonBuilderTestRunner {

    @Bean
    @Profile("test-runner")
    public CommandLineRunner testRunner(
            @Autowired LessonBuilderService lessonBuilderService,
            @Autowired UserRepository userRepository,
            @Autowired ClassRepository classRepository,
            @Autowired LessonRepository lessonRepository,
            @Autowired PasswordEncoder passwordEncoder) {
        
        return args -> {
            System.out.println("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —É—Ä–æ–∫–æ–≤...\n");
            
            try {
                // –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                lessonRepository.deleteAll();
                classRepository.deleteAll();
                userRepository.deleteAll();
                
                // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                System.out.println("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
                User teacher = createTeacher(userRepository, passwordEncoder);
                User student1 = createStudent(userRepository, passwordEncoder, "student1", "student1@example.com");
                User student2 = createStudent(userRepository, passwordEncoder, "student2", "student2@example.com");
                Class testClass = createClass(classRepository, teacher, Arrays.asList(student1, student2));
                
                System.out.println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã");
                
                // 2. –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞
                System.out.println("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞...");
                LessonBuilderRequest testRequest = createTestLessonRequest(testClass.getId(), 
                    Arrays.asList(student1.getId(), student2.getId()));
                
                Lesson createdLesson = lessonBuilderService.createLessonFromBuilder(testRequest);
                System.out.println("‚úÖ –£—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω —Å ID: " + createdLesson.getId());
                
                // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
                System.out.println("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤...");
                List<Lesson> drafts = lessonBuilderService.getDraftLessonsByTeacher(teacher.getId());
                System.out.println("‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: " + drafts.size() + " —É—Ä–æ–∫–æ–≤");
                
                // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
                System.out.println("\n4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞...");
                testRequest.setTitle("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫");
                testRequest.setOrderNumber(2);
                Lesson updatedLesson = lessonBuilderService.updateLessonFromBuilder(createdLesson.getId(), testRequest);
                System.out.println("‚úÖ –£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: " + updatedLesson.getTitle());
                
                // 5. –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Ä–æ–∫–∞
                System.out.println("\n5. –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Ä–æ–∫–∞...");
                lessonBuilderService.publishLessonForStudents(createdLesson.getId(), 
                    Arrays.asList(student1.getId(), student2.getId()));
                System.out.println("‚úÖ –£—Ä–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω");
                
                // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
                System.out.println("\n6. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤...");
                List<Lesson> published = lessonBuilderService.getPublishedLessonsByTeacher(teacher.getId());
                System.out.println("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: " + published.size() + " —É—Ä–æ–∫–æ–≤");
                
                // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
                System.out.println("\n7. –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è —É—á–µ–Ω–∏–∫–∞...");
                List<Lesson> studentLessons = lessonBuilderService.getLessonsForStudent(student1.getId());
                System.out.println("‚úÖ –£—Ä–æ–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã: " + studentLessons.size() + " —É—Ä–æ–∫–æ–≤");
                
                // 8. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
                System.out.println("\n8. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞...");
                Class targetClass = createClass(classRepository, teacher, Arrays.asList(student1));
                Lesson copiedLesson = lessonBuilderService.copyLessonToClass(createdLesson.getId(), targetClass.getId());
                System.out.println("‚úÖ –£—Ä–æ–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å ID: " + copiedLesson.getId());
                
                // 9. –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
                System.out.println("\n9. –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞...");
                lessonBuilderService.deleteLessonWithWords(createdLesson.getId());
                System.out.println("‚úÖ –£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω");
                
                System.out.println("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
                
            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: " + e.getMessage());
                e.printStackTrace();
            }
        };
    }
    
    private User createTeacher(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        User teacher = new User();
        teacher.setUsername("testteacher");
        teacher.setEmail("teacher@example.com");
        teacher.setPassword(passwordEncoder.encode("password123"));
        teacher.setFirstName("Test");
        teacher.setLastName("Teacher");
        teacher.setRole(UserRole.TEACHER);
        teacher.setSubject("English");
        return userRepository.save(teacher);
    }
    
    private User createStudent(UserRepository userRepository, PasswordEncoder passwordEncoder, 
                             String username, String email) {
        User student = new User();
        student.setUsername(username);
        student.setEmail(email);
        student.setPassword(passwordEncoder.encode("password123"));
        student.setFirstName("Student");
        student.setLastName(username.substring(8)); // Extract number from username
        student.setRole(UserRole.STUDENT);
        student.setGrade(10);
        return userRepository.save(student);
    }
    
    private Class createClass(ClassRepository classRepository, User teacher, List<User> students) {
        Class testClass = new Class();
        testClass.setName("Test Class");
        testClass.setDescription("Test class description");
        testClass.setGrade(10);
        testClass.setTeacher(teacher);
        testClass.setStudents(students);
        return classRepository.save(testClass);
    }
    
    private LessonBuilderRequest createTestLessonRequest(Long classId, List<Long> studentIds) {
        LessonBuilderRequest request = new LessonBuilderRequest();
        request.setTitle("–¢–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫");
        request.setDescription("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞");
        request.setClassId(classId);
        request.setOrderNumber(1);
        request.setVideoUrl("https://example.com/video.mp4");
        request.setAudioUrl("https://example.com/audio.mp3");
        request.setImageUrl("https://example.com/image.jpg");
        request.setStudentIds(studentIds);
        request.setPublishImmediately(false);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞
        LessonBuilderRequest.WordRequest word1 = new LessonBuilderRequest.WordRequest();
        word1.setWord("hello");
        word1.setTranslation("–ø—Ä–∏–≤–µ—Ç");
        word1.setExample("Hello, world!");
        word1.setPronunciation("h…ôÀàlo ä");
        
        LessonBuilderRequest.WordRequest word2 = new LessonBuilderRequest.WordRequest();
        word2.setWord("goodbye");
        word2.setTranslation("–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è");
        word2.setExample("Goodbye, see you later!");
        word2.setPronunciation("Àå…° ädÀàba…™");
        
        request.setWords(Arrays.asList(word1, word2));
        
        return request;
    }
} 