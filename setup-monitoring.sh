#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Spring Boot —Å Prometheus –∏ Grafana
# –ê–≤—Ç–æ—Ä: Anecole Development Team

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "${CYAN}================================${NC}"
    echo -e "${CYAN}$1${NC}"
    echo -e "${CYAN}================================${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
start_monitoring() {
    log_header "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    ./docker-compose-manager.sh monitoring
    
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    log_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω"
    log_info "Prometheus: http://localhost:9090"
    log_info "Grafana: http://localhost:3000 (admin/admin123)"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Spring Boot –º–µ—Ç—Ä–∏–∫
setup_spring_metrics() {
    log_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Spring Boot –º–µ—Ç—Ä–∏–∫"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ pom.xml
    if grep -q "spring-boot-starter-actuator" pom.xml; then
        log_info "Spring Boot Actuator —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        log_warning "–î–æ–±–∞–≤—å—Ç–µ –≤ pom.xml –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
        echo
        echo "<!-- Spring Boot Actuator -->"
        echo "<dependency>"
        echo "    <groupId>org.springframework.boot</groupId>"
        echo "    <artifactId>spring-boot-starter-actuator</artifactId>"
        echo "</dependency>"
        echo
        echo "<!-- Micrometer Prometheus Registry -->"
        echo "<dependency>"
        echo "    <groupId>io.micrometer</groupId>"
        echo "    <artifactId>micrometer-registry-prometheus</artifactId>"
        echo "</dependency>"
        echo
    fi
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –º–µ—Ç—Ä–∏–∫
    if [[ ! -f "src/main/resources/application-monitoring.yml" ]]; then
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
        
        cat > src/main/resources/application-monitoring.yml << 'EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Spring Boot
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,configprops
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: anecole-backend
      environment: development
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
  web:
    server:
      request:
        log-enabled: true

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
logging:
  level:
    org.springframework.web: INFO
    org.springframework.security: INFO
    com.school.anecole: DEBUG
    io.micrometer: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–∫—Ç—É–∞—Ç–æ—Ä–∞
spring:
  security:
    user:
      name: admin
      password: admin123
EOF
        
        log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∞"
    else
        log_info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    log_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus
    if curl -s http://localhost:9090/api/v1/status/config > /dev/null; then
        log_success "Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Grafana
    if curl -s http://localhost:3000/api/health > /dev/null; then
        log_success "Grafana –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    return 0
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤ Grafana
setup_grafana_dashboards() {
    log_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤ Grafana"
    
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Grafana..."
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—à–±–æ—Ä–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if curl -s http://localhost:3000/api/search?type=dash-db | grep -q "spring-boot-metrics"; then
        log_success "–î–∞—à–±–æ—Ä–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    else
        log_warning "–î–∞—à–±–æ—Ä–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é:"
        log_info "1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000"
        log_info "2. –í–æ–π–¥–∏—Ç–µ —Å admin/admin123"
        log_info "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Dashboards -> Import"
        log_info "4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ monitoring/grafana/dashboards/"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
generate_test_load() {
    log_header "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"
    
    log_info "–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ API..."
    if ./quick-api-test.sh; then
        log_success "–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω"
    else
        log_warning "–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
    fi
    
    log_info "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:"
    log_info "./run-load-testing.sh"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
show_useful_commands() {
    log_header "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
    
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Spring Boot:"
    echo "  curl http://localhost:8080/actuator/metrics"
    echo "  curl http://localhost:8080/actuator/prometheus"
    echo
    echo "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—à–±–æ—Ä–¥–æ–≤:"
    echo "  Prometheus: http://localhost:9090"
    echo "  Grafana: http://localhost:3000"
    echo
    echo "üìà –ü–æ–ª–µ–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã Prometheus:"
    echo "  # RPS"
    echo "  rate(http_requests_total[5m])"
    echo
    echo "  # Response Time P95"
    echo "  histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))"
    echo
    echo "  # Success Rate"
    echo "  sum(rate(http_requests_total{status=~\"2..\"}[5m])) / sum(rate(http_requests_total[5m])) * 100"
    echo
    echo "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏:"
    echo "  ./docker-compose-manager.sh status"
    echo "  ./docker-compose-manager.sh logs prometheus"
    echo "  ./docker-compose-manager.sh logs grafana"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Spring Boot"
    
    check_dependencies
    setup_spring_metrics
    start_monitoring
    
    if check_services; then
        setup_grafana_dashboards
        generate_test_load
        show_useful_commands
        
        log_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        log_info "–û—Ç–∫—Ä–æ–π—Ç–µ Grafana: http://localhost:3000"
        log_info "–õ–æ–≥–∏–Ω: admin / admin123"
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        exit 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'log_error "–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 